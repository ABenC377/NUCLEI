my extension works by compiling the same files as the interpreter (and so also the parser), but with the -DEXT flag (as well as the -DINTERP flag).  The extension does the following additional things:
 - As well as simply failing when there is a parsing error, my program makes a note of it the error in an error log and tries to continue.  At the end, it will tell you that parsing failed, and give you the first 20 error messages which were generated.  This makes debugging your NUCLEI program quicker (because you don't need to fix problems one at a time).
 - additionally, the error log points to the line and column of the offending word in the code. 
 - Further, the extension flag doesn't allow undeclared variables to be used - it makes the node an error-type node, and adds an interpreter error to the error log.  This helps ensure memory safety, and actually results in an interpretter error when runnnign the test.ncl file.
  
In order to achieve the error log with line and column references, I had to first tokenise the input file into a linked list of tokens (each storing an original line and col reference).  To avoid unnecessary duplication of functionality, this tokeniser is also used in the basic parse and interp modes of operation.  The tokeniser uses a finite-state machine to iterate through the characters of the input file as they come in.  This does require some insanely meaty switch statement functions (because each state has a seperate switch case).  However, despite the large line length of this function, it is actually very simple (each case simply calls an associated function to move it along).